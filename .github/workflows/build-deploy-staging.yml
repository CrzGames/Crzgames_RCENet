name: Generate RCENet library (staging)

on:
  push:
    branches:
      - staging
  workflow_dispatch:

env:
  XMAKE_ROOT: y


jobs:
  build_rcenet:
    container: ${{ matrix.config.container }}
    defaults:
      run:
        shell: ${{ matrix.config.platform == 'mingw' && 'msys2 {0}' || 'bash' }}
    strategy:
      fail-fast: false
      matrix:
        config:
        # Les 4 premier obligé de mettre platform: linux, même si c'est : slr3-sniper-x64 et slr3-sniper-arm64
        # Version des containers : 
        - { runner: ubuntu-latest,  platform: linux,   arch: x86_64, kind: shared, container: "registry.gitlab.steamos.cloud/steamrt/sniper/sdk:3.0.20250616.139560" }
        - { runner: ubuntu-latest,  platform: linux,   arch: x86_64, kind: static, container: "registry.gitlab.steamos.cloud/steamrt/sniper/sdk:3.0.20250616.139560" }
        - { runner: ubuntu-24.04-arm, platform: linux, arch: arm64, kind: shared, container: "registry.gitlab.steamos.cloud/steamrt/sniper/sdk/arm64:3.0.20250616.139560" }
        - { runner: ubuntu-24.04-arm, platform: linux, arch: arm64, kind: static, container: "registry.gitlab.steamos.cloud/steamrt/sniper/sdk/arm64:3.0.20250616.139560" }
        - { runner: ubuntu-22.04,   platform: bsd,                                 arch: x86_64, kind: shared }
        - { runner: ubuntu-22.04,   platform: bsd,                                 arch: x86_64, kind: static }
        - { runner: ubuntu-22.04,   platform: bsd,                                 arch: i386, kind: shared }
        - { runner: ubuntu-22.04,   platform: bsd,                                 arch: i386, kind: static }
        - { runner: windows-2025, platform: windows,                             arch: x86, kind: shared }     # Windows MSVC
        - { runner: windows-2025, platform: windows,                             arch: x86, kind: static }     # Windows MSVC
        - { runner: windows-2025, platform: windows,                             arch: x64, kind: shared }     # Windows MSVC
        - { runner: windows-2025, platform: windows,                             arch: x64, kind: static }     # Windows MSVC
        - { runner: windows-2025, platform: windows,                             arch: arm, kind: shared }     # Windows MSVC
        - { runner: windows-2025, platform: windows,                             arch: arm, kind: static }     # Windows MSVC
        - { runner: windows-2025, platform: windows,                             arch: arm64, kind: shared }   # Windows MSVC
        - { runner: windows-2025, platform: windows,                             arch: arm64, kind: static }   # Windows MSVC
        - { runner: windows-2025, platform: windows,                             arch: arm64ec, kind: shared } # Windows MSVC
        - { runner: windows-2025, platform: windows,                             arch: arm64ec, kind: static } # Windows MSVC
        - { runner: windows-2025, platform: mingw,                               arch: i386, msys_arch: i686, msys_msystem: mingw32, kind: static }     # Windows MinGW
        - { runner: windows-2025, platform: mingw,                               arch: x86_64, msys_arch: x86_64, msys_msystem: mingw64, kind: static } # Windows MinGW
        - { runner: ubuntu-22.04,   platform: linux,                               arch: i386, kind: shared }
        - { runner: ubuntu-22.04,   platform: linux,                               arch: i386, kind: static }
        - { runner: ubuntu-22.04,   platform: linux,                               arch: x86_64, kind: shared }
        - { runner: ubuntu-22.04,   platform: linux,                               arch: x86_64, kind: static }
        - { runner: ubuntu-22.04,   platform: linux,                               arch: arm, kind: shared }
        - { runner: ubuntu-22.04,   platform: linux,                               arch: arm, kind: static }
        - { runner: ubuntu-22.04,   platform: linux,                               arch: arm64, kind: shared }
        - { runner: ubuntu-22.04,   platform: linux,                               arch: arm64, kind: static }
        - { runner: ubuntu-22.04,  platform: haiku,                               arch: i386, kind: shared }
        - { runner: ubuntu-22.04,  platform: haiku,                               arch: i386, kind: static }
        - { runner: ubuntu-22.04,  platform: haiku,                               arch: x86_64, kind: shared }
        - { runner: ubuntu-22.04,  platform: haiku,                               arch: x86_64, kind: static }
        - { runner: ubuntu-latest,  platform: android,                             arch: x86, kind: shared }
        - { runner: ubuntu-latest,  platform: android,                             arch: x86, kind: static }
        - { runner: ubuntu-latest,  platform: android,                             arch: x86_64, kind: shared }
        - { runner: ubuntu-latest,  platform: android,                             arch: x86_64, kind: static }
        - { runner: ubuntu-latest,  platform: android,                             arch: armeabi-v7a, kind: shared }
        - { runner: ubuntu-latest,  platform: android,                             arch: armeabi-v7a, kind: static  }
        - { runner: ubuntu-latest,  platform: android,                             arch: arm64-v8a, kind: shared }
        - { runner: ubuntu-latest,  platform: android,                             arch: arm64-v8a, kind: static }
        - { runner: macos-15,       platform: macos,         sdk: macosx,          arch: "x86_64,arm64", kind: shared }
        - { runner: macos-15,       platform: macos,         sdk: macosx,          arch: "x86_64,arm64", kind: static }
        - { runner: macos-15,       platform: ios,           sdk: iphoneos,        arch: "arm64,arm64e", kind: static }
        - { runner: macos-15,       platform: ios,           sdk: iphonesimulator, arch: "x86_64,arm64", kind: static }
        - { runner: macos-15,       platform: tvos,          sdk: appletvos,       arch: "arm64,x86_64", kind: static }
        - { runner: macos-15,       platform: tvos,          sdk: appletvsimulator,arch: "arm64,x86_64", kind: static }
        mode: [debug]  # Rajouter : release (si besoin)
    name: ${{ matrix.config.platform }}-${{ matrix.config.arch }}-${{ matrix.config.sdk }}-${{ matrix.mode }}-${{ matrix.config.kind }}
    runs-on: ${{ matrix.config.runner }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup dependencies i386 - Linux / BSD / Haiku
        if: ${{ matrix.config.arch == 'i386' && (matrix.config.platform == 'linux' || matrix.config.platform == 'bsd' || matrix.config.platform == 'haiku') }}
        run: sudo apt-get update && sudo apt-get install -y gcc-multilib g++-multilib

      - name: Setup MSys2 - MinGW
        if: ${{ matrix.config.platform == 'mingw' }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.config.msys_msystem }}
          install: >-
            base-devel 
            git 
            unzip 
            p7zip 
            mingw-w64-${{ matrix.config.msys_arch }}-toolchain 
            mingw-w64-${{ matrix.config.msys_arch }}-xmake
          update: true

      - name: Setup new version xCode and Setup Command Line Tools - macOS / iOS / tvOS
        # Doc : https://github.com/actions/runner-images/blob/main/images/macos/macos-15-arm64-Readme.md
        if: matrix.config.runner == 'macos-15'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.3.0'

      - name: Determine SDK Path and set SDKROOT - macOS / iOS / tvOS
        if: matrix.config.runner == 'macos-15'
        run: |
          xcodebuild -showsdks
          sdk="${{ matrix.config.sdk }}"
          SDKROOT=$(xcrun --sdk $sdk --show-sdk-path)
          echo "SDKROOT=$SDKROOT" >> $GITHUB_ENV
          echo "Using SDK: $sdk"

      - name: Setup NDK latest LTS - Android
        if: ${{ matrix.config.platform == 'android' }}
        id: setup-ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r27c
          link-to-sdk: true
          add-to-path: true

      - name: Setup xMake - All platforms (except MinGW)
        # This action also works with MinGW but is slower (compiles from source)
        if: ${{ matrix.config.platform != 'mingw' }}
        uses: xmake-io/github-action-setup-xmake@v1
        with:
          xmake-version: latest

      - name: Configure project with xMake - Windows-MSVC / Linux / BSD / Haiku
        if: ${{ matrix.config.platform == 'windows' || matrix.config.platform == 'linux' || matrix.config.platform == 'bsd' || matrix.config.platform == 'haiku' }}
        run: xmake config --plat=${{ matrix.config.platform }} --arch=${{ matrix.config.arch }} --mode=${{ matrix.mode }} --kind=${{ matrix.config.kind }} --yes

      - name: Configure project with xMake - Android
        if: ${{ matrix.config.platform == 'android' }}
        run:
          # --ndk_sdkver = SDK / API level Android minimal used
          # Informations : Pour éviter de construire 2 fois pour l'architecture : armeabi-v7a si on construit 
          # à partir de l'API/SDK 23 d'Android ça sera compatible pour NEON et SANS NEON
          xmake config --ndk=${{ steps.setup-ndk.outputs.ndk-path }} --ndk_sdkver=23 --plat=${{ matrix.config.platform }} --arch=${{ matrix.config.arch }} --mode=${{ matrix.mode }} --kind=${{ matrix.config.kind }} --yes

      - name: Configure project with xMake - macOS
        if: ${{ matrix.config.sdk == 'macosx' }}
        # A remplacer quand xmake auront fixer "xmake m package"
        run: |
          xmake m package --plat=${{ matrix.config.sdk }} --arch="arm64" -f "--target_minver=11.0 --mode=${{ matrix.mode }} --kind=${{ matrix.config.kind }} --yes"
          xmake
          xmake install -v -o rcenet2/
          xmake m package --plat=${{ matrix.config.sdk }} --arch="x86_64" -f "--target_minver=11.0 --mode=${{ matrix.mode }} --kind=${{ matrix.config.kind }} --yes"

      - name: Configure project with xMake - tvOS (appletvos)
        if: ${{ matrix.config.sdk == 'appletvos' }}
        # A remplacer quand xmake auront fixer "xmake m package"
        # Pas de library shared pour tvOS (.dylib) suite au restrictions d'Apple, utiliser .framework, .xcframework ou .a
        run: |
          xmake m package --plat=appletvos --arch="arm64" -f "--target_minver=12.0 --mode=${{ matrix.mode }} --kind=${{ matrix.config.kind }} --yes"
          xmake
          xmake install -v -o rcenet2/
          xmake m package --plat=appletvos --arch="x86_64" -f "--target_minver=12.0 --mode=${{ matrix.mode }} --kind=${{ matrix.config.kind }} --yes"

      - name: Configure project with xMake - tvOS (appletvsimulator)
        if: ${{ matrix.config.sdk == 'appletvsimulator' }}
        # a remplacer quand xmake auront fixer "xmake m package"
        # Pas de library shared pour tvOS (.dylib) suite au restrictions d'Apple, utiliser .framework, .xcframework ou .a
        run: |
          xmake m package --plat=appletvos --arch="arm64" -f "--appledev=simulator --target_minver=12.0 --mode=${{ matrix.mode }} --kind=${{ matrix.config.kind }} --yes"
          xmake
          xmake install -v -o rcenet2/
          xmake m package --plat=appletvos --arch="x86_64" -f "--appledev=simulator --target_minver=12.0 --mode=${{ matrix.mode }} --kind=${{ matrix.config.kind }} --yes"

      - name: Configure project with xMake - iOS (iphoneos)
        if: ${{ matrix.config.sdk == 'iphoneos' }}
        # A remplacer quand xmake auront fixer "xmake m package"
        # Pas de library shared pour iOS (.dylib) suite au restrictions d'Apple, utiliser .framework, .xcframework ou .a
        run: |
          xmake m package --plat=iphoneos --arch="arm64e" -f "--target_minver=12.0 --mode=${{ matrix.mode }} --kind=${{ matrix.config.kind }} --yes"
          xmake
          xmake install -v -o rcenet2/
          xmake m package --plat=iphoneos --arch="arm64" -f "--target_minver=12.0 --mode=${{ matrix.mode }} --kind=${{ matrix.config.kind }} --yes"

      - name: Configure project with xMake - iOS (iphonesimulator)
        if: ${{ matrix.config.sdk == 'iphonesimulator' }}
        # A remplacer quand xmake auront fixer "xmake m package"
        # Pas de library shared pour iOS (.dylib) suite au restrictions d'Apple, utiliser .framework, .xcframework ou .a
        run: |
          xmake m package --plat=iphoneos --arch="arm64" -f "--appledev=simulator --target_minver=12.0 --mode=${{ matrix.mode }} --kind=${{ matrix.config.kind }} --yes"
          xmake
          xmake install -v -o rcenet2/
          xmake m package --plat=iphoneos --arch="x86_64" -f "--appledev=simulator --target_minver=12.0 --mode=${{ matrix.mode }} --kind=${{ matrix.config.kind }} --yes"

      - name: Build project with xMake
        run: xmake
      
      - name: Install project with xMake
        # v = verbose, o = output directory
        run: | 
          xmake install -v -o rcenet/
          ls -l -R rcenet/

      - name: Create fatlib universal (dynamic) - macOS
        if: ${{ matrix.config.sdk == 'macosx' && matrix.config.kind == 'shared' }}
        run: |
          mkdir -p rcenet/x86_64-arm64/${{ matrix.config.kind }}
          lipo -create rcenet/lib/librcenet.dylib rcenet2/lib/librcenet.dylib -output rcenet/x86_64-arm64/${{ matrix.config.kind }}/librcenet.dylib

      - name: Create fatlib universal (static) - macOS
        if: ${{ matrix.config.sdk == 'macosx' && matrix.config.kind == 'static' }}
        run: |
          mkdir -p rcenet/x86_64-arm64/${{ matrix.config.kind }}
          lipo -create rcenet/lib/librcenet.a rcenet2/lib/librcenet.a -output rcenet/x86_64-arm64/${{ matrix.config.kind }}/librcenet.a

      - name: Create fatlib universal (static) - iOS (iphoneos)
        if: ${{ matrix.config.sdk == 'iphoneos' }}
        run: |
          mkdir -p rcenet/arm64-arm64e/${{ matrix.config.kind }}
          lipo -create rcenet/lib/librcenet.a rcenet2/lib/librcenet.a -output rcenet/arm64-arm64e/${{ matrix.config.kind }}/librcenet.a

      - name: Create fatlib universal (static) - iOS (iphonesimulator)
        if: ${{ matrix.config.sdk == 'iphonesimulator' }}
        run: |
          mkdir -p rcenet/x86_64-arm64/${{ matrix.config.kind }}
          lipo -create rcenet/lib/librcenet.a rcenet2/lib/librcenet.a -output rcenet/x86_64-arm64/${{ matrix.config.kind }}/librcenet.a

      - name: Create fatlib universal (static) - tvOS (appletvos)
        if: ${{ matrix.config.sdk == 'appletvos' }}
        run: |
          mkdir -p rcenet/x86_64-arm64/${{ matrix.config.kind }}
          lipo -create rcenet/lib/librcenet.a rcenet2/lib/librcenet.a -output rcenet/x86_64-arm64/${{ matrix.config.kind }}/librcenet.a

      - name: Create fatlib universal (static) - tvOS (appletvsimulator)
        if: ${{ matrix.config.sdk == 'appletvsimulator' }}
        run: |
          mkdir -p rcenet/x86_64-arm64/${{ matrix.config.kind }}
          lipo -create rcenet/lib/librcenet.a rcenet2/lib/librcenet.a -output rcenet/x86_64-arm64/${{ matrix.config.kind }}/librcenet.a

      - name: Check architecture (dynamic) - macOS
        if: ${{ matrix.config.sdk == 'macosx' && matrix.config.kind == 'shared' }}
        run: lipo -info rcenet/x86_64-arm64/${{ matrix.config.kind }}/librcenet.dylib

      - name: Check architecture (static) - macOS
        if: ${{ matrix.config.sdk == 'macosx' && matrix.config.kind == 'static' }}
        run: lipo -info rcenet/x86_64-arm64/${{ matrix.config.kind }}/librcenet.a
        
      - name: Check architecture (static) - iOS (iphoneos)
        if: ${{ matrix.config.platform == 'ios' && matrix.config.sdk == 'iphoneos' }}
        run: lipo -info rcenet/arm64-arm64e/${{ matrix.config.kind }}/librcenet.a

      - name: Check architecture (static) - iOS (iphonesimulator)
        if: ${{ matrix.config.platform == 'ios' && matrix.config.sdk == 'iphonesimulator' }}
        run: lipo -info rcenet/x86_64-arm64/${{ matrix.config.kind }}/librcenet.a

      - name: Check architecture (static) - tvOS (appletvos / appletvsimulator)
        if: ${{ matrix.config.sdk == 'appletvos' || matrix.config.sdk == 'appletvsimulator' }}
        run: lipo -info rcenet/x86_64-arm64/${{ matrix.config.kind }}/librcenet.a

      - name: Upload artifacts Binary RCENet - All platforms (except macOS / iOS / tvOS)
        if: ${{ matrix.config.platform != 'tvos' && matrix.config.platform != 'ios' && matrix.config.platform != 'macos' }}
        uses: actions/upload-artifact@v4
        with:
          name: librcenet-${{ matrix.config.platform }}-${{ matrix.config.arch }}-${{ matrix.config.sdk }}-${{ matrix.mode }}-${{ matrix.config.kind }}
          path: rcenet/
          retention-days: 1

      - name: Upload artifacts Binary RCENet - macOS
        if: ${{ matrix.config.platform == 'macos' }}
        uses: actions/upload-artifact@v4
        with:
          name: librcenet-${{ matrix.config.platform }}-${{ matrix.config.arch }}-${{ matrix.config.sdk }}-${{ matrix.mode }}-${{ matrix.config.kind }}
          path: rcenet/x86_64-arm64/${{ matrix.config.kind }}
          retention-days: 1

      - name: Upload artifacts Binary RCENet - iOS (iphoneos)
        if: ${{ matrix.config.platform == 'ios' && matrix.config.sdk == 'iphoneos' }}
        uses: actions/upload-artifact@v4
        with:
          name: librcenet-${{ matrix.config.platform }}-${{ matrix.config.arch }}-${{ matrix.config.sdk }}-${{ matrix.mode }}-${{ matrix.config.kind }}
          path: rcenet/arm64-arm64e/${{ matrix.config.kind }}
          retention-days: 1
          
      - name: Upload artifacts Binary RCENet - iOS (iphonesimulator)
        if: ${{ matrix.config.platform == 'ios' && matrix.config.sdk == 'iphonesimulator' }}
        uses: actions/upload-artifact@v4
        with:
          name: librcenet-${{ matrix.config.platform }}-${{ matrix.config.arch }}-${{ matrix.config.sdk }}-${{ matrix.mode }}-${{ matrix.config.kind }}
          path: rcenet/x86_64-arm64/${{ matrix.config.kind }}
          retention-days: 1

      - name: Upload artifacts Binary RCENet - tvOS (appletvos / appletvsimulator)
        if: ${{ matrix.config.platform == 'tvos' }}
        uses: actions/upload-artifact@v4
        with:
          name: librcenet-${{ matrix.config.platform }}-${{ matrix.config.arch }}-${{ matrix.config.sdk }}-${{ matrix.mode }}-${{ matrix.config.kind }}
          path: rcenet/x86_64-arm64/${{ matrix.config.kind }}
          retention-days: 1

  build_deploy_website:
    needs: build_rcenet
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Node.js latest LTS
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install dependencies
        run: npm ci
        working-directory: ./docs

      - name: Build with VitePress
        run: npm run build
        working-directory: ./docs

      - name: Deploy files website static for docs API RCENet
        uses: SamKirkland/FTP-Deploy-Action@v4.3.6
        with:
          server: ${{ secrets.O2SWITCH_FTP_HOST }}
          username: ${{ secrets.O2SWITCH_FTP_USERNAME }}
          password: ${{ secrets.O2SWITCH_FTP_PASSWORD }}
          port: ${{ secrets.O2SWITCH_FTP_PORT }}
          protocol: ftp
          local-dir: ./docs/.vitepress/dist/
          server-dir: staging.librcenet.crzcommon2.com/
          exclude: |
            dist